; Remember this is mini-Lisp, not Clojure!
(setq *g* 40)

(defun add (x y)
  (+ x y))

(defun minus (x y)
  (- x y))

(defun test (p)
  (add p (minus p *g*)))

(print (test 3.3)) ; Should give -34

(defun print-count (p)
  (print (+ (count p) (count (cdr p)))))

(setq h (list 1 2 3 4))

(defun zero? (p)
  (if (= p 0) true nil ))
;  (= p 0))

(defun recur (p)
;  (print "entering recur..")
; (if (= p (list))
;  (if (= (count p) 0)
  (if (zero? (count p))
      (progn
        (print "done")) ; bla bla
;        (list 3 2 1))
    (progn
;     (print "not very done..") ; (cdr p)) 
     (print (car p))
     (recur (cdr p)))))

;(print (recur (list 1 (list "a" "b") 3)))

(defun tata ()
  (print "tata works (in tata)!"))

(tata)

(defun recursive-count (p)
  (if (= (list) p)
    0
    (+ 1 (recursive-count (cdr p)))))

(print (recursive-count (list 1 2 3 4))) ; Should give 4
;(print (recur-count h))
;(tata)

;(print (= (count (list)) 0))

;(print (if (= 1 1) "true" "false"))

;(print (= (cdr (list 1)) (list)))

;(print (= 1 1))

;(tata)

;(print (zero? (count (cdr (list 1)))))
